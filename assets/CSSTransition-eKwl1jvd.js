import{r as o}from"./index-B-SYruCi.js";import{j as A}from"./jsx-runtime-CLpGMVip.js";const S=typeof window<"u"&&window.document?o.useLayoutEffect:o.useEffect;var a=(e=>(e.APPEAR="appear",e.APPEAR_ACTIVE="appearActive",e.APPEAR_DONE="appearDone",e.ENTER="enter",e.ENTER_ACTIVE="enterActive",e.ENTER_DONE="enterDone",e.EXIT="exit",e.EXIT_ACTIVE="exitActive",e.EXIT_DONE="exitDone",e))(a||{}),w=(e=>(e.ENTER="onEnter",e.ENTERING="onEntering",e.ENTERED="onEntered",e.EXIT="onExit",e.EXITING="onExiting",e.EXITED="onExited",e))(w||{});const N={appear:["onEnter","appearActive"],appearActive:["onEntering","appearDone",!0],appearDone:["onEntered"],enter:["onEnter","enterActive"],enterActive:["onEntering","enterDone",!0],enterDone:["onEntered"],exit:["onExit","exitActive"],exitActive:["onExiting","exitDone",!0],exitDone:["onExited"]};function _(e){const{children:t,in:n=!1,appear:r=!1,enter:d=!0,exit:l=!0,duration:y=500,alwaysMounted:x=!1,addEndListener:v}=e;let T=!1;const[u,p]=o.useState(()=>(T=!0,n?r?"appear":"appearDone":"exitDone"));o.useEffect(()=>{const{setTimeout:E,clearTimeout:f}=window,[i,s,c]=N[u],{[i]:h}=e;h==null||h();let b=0;return s&&(c?v?v(u,()=>p(s)):b=E(p,y,s):b=E(p,0,s)),()=>{f(b)}},[u,y]),S(()=>{T||p(n?d?"enter":"enterDone":l?"exit":"exitDone")},[n]);const m=o.useMemo(()=>Object.keys(N).reduce((E,f)=>({...E,[f]:u===f}),{}),[u]);return!x&&(l?u==="exitDone":!n)?null:typeof t=="function"?t(m,u):t}try{_.displayName="Transition",_.__docgenInfo={description:'The `Transition` component handles the animation lifecycle of a component as it enters and exits\nthe DOM. The component can manage transitions for different phases: "appear", "enter",\nand "exit", with each phase having an active state and a done state. These phases can be triggered and\ncustomized based on the visibility of the component (controlled by the `in` prop).',displayName:"Transition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:`A render function that provides the current transition state and active phase.
@param transitionState - The current state of the transition, indicating which phase is active.
@param activePhase - The phase currently in progress (e.g., "appearActive", "enterDone").
@returns React nodes to render.`,name:"children",required:!0,type:{name:"ReactNode | ((transitionState: TransitionState, activePhase: TransitionPhase) => ReactNode)"}}}}}catch{}try{a.displayName="TransitionPhase",a.__docgenInfo={description:`Enum representing the different phases of a transition.
Each phase corresponds to a specific stage of the transition lifecycle.`,displayName:"TransitionPhase",props:{}}}catch{}try{w.displayName="TransitionPhaseEvent",w.__docgenInfo={description:"Enum representing event callbacks for various transition phases.",displayName:"TransitionPhaseEvent",props:{}}}catch{}const I=(e,t,n)=>{const{[t]:r=n}=e.props;return r};function q(e){const{children:t,appear:n=!1,enter:r=!0,exit:d=!1,duration:l=500}=e,y=o.useRef(!0),x=o.useRef([]),v=[],T=[],u={},p=[];o.Children.toArray(t).forEach(i=>{o.isValidElement(i)&&(u[i.key]=p.length,p.push(i))});const m=(i,s)=>{const c=o.cloneElement(i,{exit:d,enter:r,duration:l,in:!s,appear:y.current?I(i,"appear",n):I(i,"enter",r)});v.push({element:i,removeTimeout:s}),T.push(c)},E=i=>window.setTimeout(()=>{const{current:s}=x,c=s.findIndex(({element:h})=>h.key===i.key);c>=0&&s.splice(c,1)},I(i,"duration",l));let f=0;x.current.forEach(({element:i,removeTimeout:s})=>{const c=u[i.key]??-1;if(c<0)s?m(i,s):d&&i.props.exit!==!1&&m(i,E(i));else{s&&window.clearTimeout(s);for(let h=f;h<=c;h+=1)m(p[h])}f=Math.max(f,c+1)});for(let i=f;i<p.length;i+=1)m(p[i]);return x.current=v,y.current=!1,T}try{q.displayName="TransitionGroup",q.__docgenInfo={description:"The `TransitionGroup` component handles a collection of `Transition` child elements\nand applies transition animations when elements enter and exit the DOM.\nIt can be used to animate multiple elements, controlling their appearance and removal in a container.",displayName:"TransitionGroup",props:{appear:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "appear"
phase when the component is first mounted.`,name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:`A boolean indicating whether the children should transition through the "enter"
phases when they are added to the DOM.`,name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "exit"
phases when they are removed from the DOM.`,name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:`The duration of the transition in milliseconds. This value can be used to set the
transition duration for all children in the group.`,name:"duration",required:!1,type:{name:"number"}}}}}catch{}const R=(e,t)=>{const n=t[e];switch(e){case a.APPEAR_ACTIVE:return{...t[a.APPEAR],...n};case a.ENTER_ACTIVE:return{...t[a.ENTER],...n};case a.EXIT_ACTIVE:return{...t[a.EXIT],...n};default:return n}};function P(e){const{children:t,styles:n,phase:r}=e;if(!o.isValidElement(t))return null;const{style:d}=t.props,l=o.useMemo(()=>({...d,...R(r,n)}),[d,n,r]);return o.cloneElement(t,{style:l})}function D(e){const{children:t,styles:n,...r}=e;return A.jsx(_,{...r,children:(d,l)=>A.jsx(P,{children:t,styles:n,phase:l})})}try{D.displayName="StyleTransition",D.__docgenInfo={description:'The `StyleTransition` component allows you to animate the styles of a component across different\ntransition phases. It automatically manages the styles for each transition phase\n(e.g., "appear", "enter", "exit") and applies them to the `children` element.',displayName:"StyleTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `style` prop.\nThe `style` prop will be combined with the styles specified in the `styles` prop for the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ style?: CSSProperties | undefined; }, string | JSXElementConstructor<any>>"}},styles:{defaultValue:null,description:"An object containing styles for different animation phases.\n`TransitionPhase` indicates the animation phase, for which specific styles can be applied.\nEach phase style is represented by a `React.CSSProperties` object.",name:"styles",required:!0,type:{name:"StyleTransitionStyles"}}}}}catch{}const M={[a.APPEAR]:"-appear",[a.APPEAR_ACTIVE]:"-appear-active",[a.APPEAR_DONE]:"-appear-done",[a.ENTER]:"-enter",[a.ENTER_ACTIVE]:"-enter-active",[a.ENTER_DONE]:"-enter-done",[a.EXIT]:"-exit",[a.EXIT_ACTIVE]:"-exit-active",[a.EXIT_DONE]:"-exit-done"},X=(e,t)=>`${e}${t}`,V=(...e)=>e.filter(t=>!!t).join(" "),g=(e,t)=>typeof t=="string"?X(t,M[e]):t[e],O=(e,t)=>{const n=g(e,t);switch(e){case a.APPEAR_ACTIVE:return V(g(a.APPEAR,t),n);case a.ENTER_ACTIVE:return V(g(a.ENTER,t),n);case a.EXIT_ACTIVE:return V(g(a.EXIT,t),n);default:return n}};function k(e){const{children:t,classNames:n,phase:r}=e;if(!o.isValidElement(t))return null;const{className:d}=t.props,l=o.useMemo(()=>V(d,O(r,n)),[d,n,r]);return o.cloneElement(t,{className:l})}function C(e){const{children:t,classNames:n,...r}=e;return A.jsx(_,{...r,children:(d,l)=>A.jsx(k,{children:t,classNames:n,phase:l})})}try{C.displayName="CSSTransition",C.__docgenInfo={description:'The `CSSTransition` component applies CSS transitions based on the phase of a transition lifecycle.\nIt automatically manages the class names for each transition phase (e.g., "appear", "enter", "exit")\nand applies them to the `children` element.',displayName:"CSSTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `className` prop.\nThe `className` prop will be combined with the class name from the `classNames` prop, based on the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ className?: string | undefined; }, string | JSXElementConstructor<any>>"}},classNames:{defaultValue:null,description:"Defines the CSS class names to be applied for each transition phase.",name:"classNames",required:!0,type:{name:"CSSTransitionClassNames"}}}}}catch{}export{C,D as S,_ as T,q as a};
