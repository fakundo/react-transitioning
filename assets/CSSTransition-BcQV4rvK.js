import{r}from"./index-B-SYruCi.js";import{j as V}from"./jsx-runtime-CLpGMVip.js";const S=typeof window<"u"&&window.document?r.useLayoutEffect:r.useEffect;var i=(e=>(e.APPEAR="appear",e.APPEAR_ACTIVE="appearActive",e.APPEAR_DONE="appearDone",e.ENTER="enter",e.ENTER_ACTIVE="enterActive",e.ENTER_DONE="enterDone",e.EXIT="exit",e.EXIT_ACTIVE="exitActive",e.EXIT_DONE="exitDone",e))(i||{}),b=(e=>(e.ENTER="onEnter",e.ENTERING="onEntering",e.ENTERED="onEntered",e.EXIT="onExit",e.EXITING="onExiting",e.EXITED="onExited",e))(b||{});const w={appear:["onEnter","appearActive"],appearActive:["onEntering","appearDone",!0],appearDone:["onEntered"],enter:["onEnter","enterActive"],enterActive:["onEntering","enterDone",!0],enterDone:["onEntered"],exit:["onExit","exitActive"],exitActive:["onExiting","exitDone",!0],exitDone:["onExited"]};function _(e){const{children:t,in:a=!1,appear:o=!1,enter:l=!0,exit:s=!0,duration:x=500,alwaysMounted:v=!1,addEndListener:T}=e,[u,f]=r.useState(()=>{switch(!0){case!a:return"exitDone";case!!o:return"appear";default:return"appearDone"}});r.useEffect(()=>{const{setTimeout:c,clearTimeout:E}=window,[y,n,d]=w[u],{[y]:p}=e;p==null||p();let h=0,I=0;return n&&(d?T?T(u,()=>f(n)):h=c(f,x,n):I=requestAnimationFrame(()=>f(n))),()=>{E(h),cancelAnimationFrame(I)}},[u,x]),S(()=>{const c=["exit","exitActive","exitDone"].includes(u);a&&c&&f(l?"enter":"enterDone"),!a&&!c&&f(s?"exit":"exitDone")},[a]);const m=r.useMemo(()=>Object.keys(w).reduce((c,E)=>({...c,[E]:u===E}),{}),[u]);return!v&&(s?u==="exitDone":!a)?null:typeof t=="function"?t(m,u):t}try{_.displayName="Transition",_.__docgenInfo={description:'The `Transition` component handles the animation lifecycle of a component as it enters and exits\nthe DOM. The component can manage transitions for different phases: "appear", "enter",\nand "exit", with each phase having an active state and a done state. These phases can be triggered and\ncustomized based on the visibility of the component (controlled by the `in` prop).',displayName:"Transition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:`A render function that provides the current transition state and active phase.
@param transitionState - The current state of the transition, indicating which phase is active.
@param activePhase - The phase currently in progress (e.g., "appearActive", "enterDone").
@returns React nodes to render.`,name:"children",required:!0,type:{name:"ReactNode | ((transitionState: TransitionState, activePhase: TransitionPhase) => ReactNode)"}}}}}catch{}try{i.displayName="TransitionPhase",i.__docgenInfo={description:`Enum representing the different phases of a transition.
Each phase corresponds to a specific stage of the transition lifecycle.`,displayName:"TransitionPhase",props:{}}}catch{}try{b.displayName="TransitionPhaseEvent",b.__docgenInfo={description:"Enum representing event callbacks for various transition phases.",displayName:"TransitionPhaseEvent",props:{}}}catch{}function q(e){const{children:t,appear:a=!1,enter:o=!0,exit:l=!1,duration:s=500}=e,x=r.useRef(!1),v=r.useRef([]),T=[],u=[],f={},m=[];r.Children.toArray(t).forEach(n=>{r.isValidElement(n)&&(f[n.key]=m.length,m.push(n))});const c=(n,d)=>{const p=r.cloneElement(n,{in:!d,enter:!1,exit:n.props.exit??l,duration:n.props.duration??s,appear:x.current?n.props.enter??o:n.props.appear??a});T.push({element:n,removeTimeout:d}),u.push(p)},E=n=>window.setTimeout(()=>{const{current:d}=v,p=d.findIndex(({element:h})=>h.key===n.key);p>=0&&d.splice(p,1)},n.props.duration??s);let y=0;v.current.forEach(({element:n,removeTimeout:d})=>{const p=f[n.key]??-1;if(p<0)d?c(n,d):(n.props.exit??l)&&c(n,E(n));else{d&&window.clearTimeout(d);for(let h=y;h<=p;h+=1)c(m[h])}y=Math.max(y,p+1)});for(let n=y;n<m.length;n+=1)c(m[n]);return S(()=>{x.current=!0},[]),v.current=T,u}try{q.displayName="TransitionGroup",q.__docgenInfo={description:"The `TransitionGroup` component handles a collection of `Transition` child elements\nand applies transition animations when elements enter and exit the DOM.\nIt can be used to animate multiple elements, controlling their appearance and removal in a container.",displayName:"TransitionGroup",props:{appear:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "appear"
phase when the component is first mounted.`,name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:`A boolean indicating whether the children should transition through the "enter"
phases when they are added to the DOM.`,name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "exit"
phases when they are removed from the DOM.`,name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:`The duration of the transition in milliseconds. This value can be used to set the
transition duration for all children in the group.`,name:"duration",required:!1,type:{name:"number"}}}}}catch{}const C=(e,t)=>{const a=t[e];switch(e){case i.APPEAR_ACTIVE:return{...t[i.APPEAR],...a};case i.ENTER_ACTIVE:return{...t[i.ENTER],...a};case i.EXIT_ACTIVE:return{...t[i.EXIT],...a};default:return a}};function R(e){const{children:t,styles:a,phase:o}=e;if(!r.isValidElement(t))return null;const{style:l}=t.props,s=r.useMemo(()=>({...l,...C(o,a)}),[l,a,o]);return r.cloneElement(t,{style:s})}function N(e){const{children:t,styles:a,...o}=e;return V.jsx(_,{...o,children:(l,s)=>V.jsx(R,{children:t,styles:a,phase:s})})}try{N.displayName="StyleTransition",N.__docgenInfo={description:'The `StyleTransition` component allows you to animate the styles of a component across different\ntransition phases. It automatically manages the styles for each transition phase\n(e.g., "appear", "enter", "exit") and applies them to the `children` element.',displayName:"StyleTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `style` prop.\nThe `style` prop will be combined with the styles specified in the `styles` prop for the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ style?: CSSProperties | undefined; }, string | JSXElementConstructor<any>>"}},styles:{defaultValue:null,description:"An object containing styles for different animation phases.\n`TransitionPhase` indicates the animation phase, for which specific styles can be applied.\nEach phase style is represented by a `React.CSSProperties` object.",name:"styles",required:!0,type:{name:"StyleTransitionStyles"}}}}}catch{}const P={[i.APPEAR]:"-appear",[i.APPEAR_ACTIVE]:"-appear-active",[i.APPEAR_DONE]:"-appear-done",[i.ENTER]:"-enter",[i.ENTER_ACTIVE]:"-enter-active",[i.ENTER_DONE]:"-enter-done",[i.EXIT]:"-exit",[i.EXIT_ACTIVE]:"-exit-active",[i.EXIT_DONE]:"-exit-done"},M=(e,t)=>`${e}${t}`,A=(...e)=>e.filter(t=>!!t).join(" "),g=(e,t)=>typeof t=="string"?M(t,P[e]):t[e],X=(e,t)=>{const a=g(e,t);switch(e){case i.APPEAR_ACTIVE:return A(g(i.APPEAR,t),a);case i.ENTER_ACTIVE:return A(g(i.ENTER,t),a);case i.EXIT_ACTIVE:return A(g(i.EXIT,t),a);default:return a}};function O(e){const{children:t,classNames:a,phase:o}=e;if(!r.isValidElement(t))return null;const{className:l}=t.props,s=r.useMemo(()=>A(l,X(o,a)),[l,a,o]);return r.cloneElement(t,{className:s})}function D(e){const{children:t,classNames:a,...o}=e;return V.jsx(_,{...o,children:(l,s)=>V.jsx(O,{children:t,classNames:a,phase:s})})}try{D.displayName="CSSTransition",D.__docgenInfo={description:'The `CSSTransition` component applies CSS transitions based on the phase of a transition lifecycle.\nIt automatically manages the class names for each transition phase (e.g., "appear", "enter", "exit")\nand applies them to the `children` element.',displayName:"CSSTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `className` prop.\nThe `className` prop will be combined with the class name from the `classNames` prop, based on the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ className?: string | undefined; }, string | JSXElementConstructor<any>>"}},classNames:{defaultValue:null,description:"Defines the CSS class names to be applied for each transition phase.",name:"classNames",required:!0,type:{name:"CSSTransitionClassNames"}}}}}catch{}export{D as C,N as S,_ as T,q as a};
