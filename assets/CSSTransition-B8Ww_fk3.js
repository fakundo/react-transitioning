import{r}from"./index-B-SYruCi.js";import{j as A}from"./jsx-runtime-CLpGMVip.js";const S=typeof window<"u"&&window.document?r.useLayoutEffect:r.useEffect;var i=(e=>(e.APPEAR="appear",e.APPEAR_ACTIVE="appearActive",e.APPEAR_DONE="appearDone",e.ENTER="enter",e.ENTER_ACTIVE="enterActive",e.ENTER_DONE="enterDone",e.EXIT="exit",e.EXIT_ACTIVE="exitActive",e.EXIT_DONE="exitDone",e))(i||{}),w=(e=>(e.ENTER="onEnter",e.ENTERING="onEntering",e.ENTERED="onEntered",e.EXIT="onExit",e.EXITING="onExiting",e.EXITED="onExited",e))(w||{});const q={appear:["onEnter","appearActive"],appearActive:["onEntering","appearDone",!0],appearDone:["onEntered"],enter:["onEnter","enterActive"],enterActive:["onEntering","enterDone",!0],enterDone:["onEntered"],exit:["onExit","exitActive"],exitActive:["onExiting","exitDone",!0],exitDone:["onExited"]};function _(e){const{children:t,in:n=!1,appear:o=!1,enter:p=!0,exit:s=!0,duration:h=500,alwaysMounted:E=!1,addEndListener:y}=e,x=r.useRef(0);let v=!1;const[l,c]=r.useState(()=>(v=!0,n?o?"appear":"appearDone":"exitDone"));r.useEffect(()=>{const{setTimeout:f,clearTimeout:a}=window,[u,d,m]=q[l],{[u]:b}=e;return b==null||b(),d&&(m?y?y(l,()=>c(d)):x.current=f(c,h,d):c(d)),()=>{a(x.current)}},[l,h]),S(()=>{v||c(n?p?"enter":"enterDone":s?"exit":"exitDone")},[n]);const V=r.useMemo(()=>Object.keys(q).reduce((f,a)=>({...f,[a]:l===a}),{}),[l]);return!E&&l==="exitDone"?null:t(V,l)}try{_.displayName="Transition",_.__docgenInfo={description:'The `Transition` component handles the animation lifecycle of a component as it enters and exits\nthe DOM. The component can manage transitions for different phases: "appear", "enter",\nand "exit", with each phase having an active state and a done state. These phases can be triggered and\ncustomized based on the visibility of the component (controlled by the `in` prop).',displayName:"Transition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:`A render function that provides the current transition state and active phase.
@param transitionState - The current state of the transition, indicating which phase is active.
@param activePhase - The phase currently in progress (e.g., "appearActive", "enterDone").
@returns React nodes to render.`,name:"children",required:!0,type:{name:"(transitionState: TransitionState, activePhase: TransitionPhase) => ReactNode"}}}}}catch{}try{i.displayName="TransitionPhase",i.__docgenInfo={description:`Enum representing the different phases of a transition.
Each phase corresponds to a specific stage of the transition lifecycle.`,displayName:"TransitionPhase",props:{}}}catch{}try{w.displayName="TransitionPhaseEvent",w.__docgenInfo={description:"Enum representing event callbacks for various transition phases.",displayName:"TransitionPhaseEvent",props:{}}}catch{}const I=(e,t,n)=>{const{[t]:o=n}=e.props;return o};function N(e){const{children:t,appear:n=!1,enter:o=!0,exit:p=!1,duration:s=500}=e,h=r.useRef(!0),E=r.useRef([]),y=[],x=[],v={},l=[];r.Children.toArray(t).forEach(a=>{r.isValidElement(a)&&(v[a.key]=l.length,l.push(a))});const c=(a,u)=>{const d=r.cloneElement(a,{exit:p,enter:o,duration:s,in:!u,appear:h.current?I(a,"appear",n):I(a,"enter",o)});y.push({element:a,removeTimeout:u}),x.push(d)},V=a=>window.setTimeout(()=>{const{current:u}=E,d=u.findIndex(({element:m})=>m.key===a.key);d>=0&&u.splice(d,1)},I(a,"duration",s));let f=0;E.current.forEach(({element:a,removeTimeout:u})=>{const d=v[a.key]??-1;if(d<0)u?c(a,u):p&&a.props.exit!==!1&&c(a,V(a));else{u&&window.clearTimeout(u);for(let m=f;m<=d;m+=1)c(l[m])}f=Math.max(f,d+1)});for(let a=f;a<l.length;a+=1)c(l[a]);return E.current=y,h.current=!1,x}try{N.displayName="TransitionGroup",N.__docgenInfo={description:"The `TransitionGroup` component handles a collection of `Transition` child elements\nand applies transition animations when elements enter and exit the DOM.\nIt can be used to animate multiple elements, controlling their appearance and removal in a container.",displayName:"TransitionGroup",props:{appear:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "appear"
phase when the component is first mounted.`,name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:`A boolean indicating whether the children should transition through the "enter"
phases when they are added to the DOM.`,name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"false"},description:`A boolean indicating whether the children should transition through the "exit"
phases when they are removed from the DOM.`,name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:`The duration of the transition in milliseconds. This value can be used to set the
transition duration for all children in the group.`,name:"duration",required:!1,type:{name:"number"}}}}}catch{}const R=(e,t)=>{const n=t[e];switch(e){case i.APPEAR_ACTIVE:return{...t[i.APPEAR],...n};case i.ENTER_ACTIVE:return{...t[i.ENTER],...n};case i.EXIT_ACTIVE:return{...t[i.EXIT],...n};default:return n}},P=e=>{const{children:t,styles:n,phase:o}=e,p=r.Children.only(t),{style:s}=p.props,h=r.useMemo(()=>({...s,...R(o,n)}),[s,n,o]);return r.cloneElement(p,{style:h})};function D(e){const{children:t,styles:n,...o}=e;return A.jsx(_,{...o,children:(p,s)=>A.jsx(P,{children:t,styles:n,phase:s})})}try{D.displayName="StyleTransition",D.__docgenInfo={description:'The `StyleTransition` component allows you to animate the styles of a component across different\ntransition phases. It automatically manages the styles for each transition phase\n(e.g., "appear", "enter", "exit") and applies them to the `children` element.',displayName:"StyleTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `style` prop.\nThe `style` prop will be combined with the styles specified in the `styles` prop for the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ style?: CSSProperties | undefined; }, string | JSXElementConstructor<any>>"}},styles:{defaultValue:null,description:"An object containing styles for different animation phases.\n`TransitionPhase` indicates the animation phase, for which specific styles can be applied.\nEach phase style is represented by a `React.CSSProperties` object.",name:"styles",required:!0,type:{name:"StyleTransitionStyles"}}}}}catch{}const M={[i.APPEAR]:"-appear",[i.APPEAR_ACTIVE]:"-appear-active",[i.APPEAR_DONE]:"-appear-done",[i.ENTER]:"-enter",[i.ENTER_ACTIVE]:"-enter-active",[i.ENTER_DONE]:"-enter-done",[i.EXIT]:"-exit",[i.EXIT_ACTIVE]:"-exit-active",[i.EXIT_DONE]:"-exit-done"},X=(e,t)=>`${e}${t}`,g=(...e)=>e.filter(t=>!!t).join(" "),T=(e,t)=>typeof t=="string"?X(t,M[e]):t[e],O=(e,t)=>{const n=T(e,t);switch(e){case i.APPEAR_ACTIVE:return g(T(i.APPEAR,t),n);case i.ENTER_ACTIVE:return g(T(i.ENTER,t),n);case i.EXIT_ACTIVE:return g(T(i.EXIT,t),n);default:return n}},k=e=>{const{children:t,classNames:n,phase:o}=e,p=r.Children.only(t),{className:s}=p.props,h=r.useMemo(()=>g(s,O(o,n)),[s,n,o]);return r.cloneElement(p,{className:h})};function C(e){const{children:t,classNames:n,...o}=e;return A.jsx(_,{...o,children:(p,s)=>A.jsx(k,{children:t,classNames:n,phase:s})})}try{C.displayName="CSSTransition",C.__docgenInfo={description:'The `CSSTransition` component applies CSS transitions based on the phase of a transition lifecycle.\nIt automatically manages the class names for each transition phase (e.g., "appear", "enter", "exit")\nand applies them to the `children` element.',displayName:"CSSTransition",props:{onEnter:{defaultValue:null,description:"",name:"onEnter",required:!1,type:{name:"(() => void)"}},onEntering:{defaultValue:null,description:"",name:"onEntering",required:!1,type:{name:"(() => void)"}},onEntered:{defaultValue:null,description:"",name:"onEntered",required:!1,type:{name:"(() => void)"}},onExit:{defaultValue:null,description:"",name:"onExit",required:!1,type:{name:"(() => void)"}},onExiting:{defaultValue:null,description:"",name:"onExiting",required:!1,type:{name:"(() => void)"}},onExited:{defaultValue:null,description:"",name:"onExited",required:!1,type:{name:"(() => void)"}},in:{defaultValue:{value:"false"},description:`If true, the component is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,name:"in",required:!1,type:{name:"boolean"}},appear:{defaultValue:{value:"false"},description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',name:"appear",required:!1,type:{name:"boolean"}},enter:{defaultValue:{value:"true"},description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',name:"enter",required:!1,type:{name:"boolean"}},exit:{defaultValue:{value:"true"},description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',name:"exit",required:!1,type:{name:"boolean"}},duration:{defaultValue:{value:"500"},description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",name:"duration",required:!1,type:{name:"number"}},alwaysMounted:{defaultValue:{value:"false"},description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',name:"alwaysMounted",required:!1,type:{name:"boolean"}},addEndListener:{defaultValue:null,description:`A function called to manually handle the end of a transition phase.
@param phase - The current transition phase (e.g., "appear", "enter", "exit").
@param done - A callback function to signal that the phase is complete.`,name:"addEndListener",required:!1,type:{name:"((phase: TransitionPhase, done: () => void) => void)"}},children:{defaultValue:null,description:"The child element to which the animation will be applied.\nThis should be a single React element that supports the `className` prop.\nThe `className` prop will be combined with the class name from the `classNames` prop, based on the current transition phase.",name:"children",required:!0,type:{name:"ReactElement<{ className?: string | undefined; }, string | JSXElementConstructor<any>>"}},classNames:{defaultValue:null,description:"Defines the CSS class names to be applied for each transition phase.",name:"classNames",required:!0,type:{name:"CSSTransitionClassNames"}}}}}catch{}export{C,D as S,_ as T,N as a};
